version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 ));
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
              - frontend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Build front-end
          command: |
            # Your code here
            # exit 1
            cd frontend
            rm -rf node_modules/
            npm install
            npm run build
      - save_cache:
          paths:
              - frontend/node_modules
              - frontend/dist
          key: frontend-build-${CIRCLE_WORKFLOW_ID}
  # Section 2 - Build Phase forum here:
  #     https://knowledge.udacity.com/questions/419574
  #     https://github.com/jmcgui05/cicd/blob/master/.circleci/config.yml#L70
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
              - backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Back-end build
          command: |
             # Your code here
             # exit 1
             cd backend
             rm -rf node_modules/
             npm install
             npm run build
      - save_cache:
          paths:
              - backend/node_modules
              - backend/dist
          key: backend-build-${CIRCLE_WORKFLOW_ID}

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
              - frontend-build-${CIRCLE_WORKFLOW_ID}
      # Your job code here
      - run:
          name: Test front end
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
              - backend-build-${CIRCLE_WORKFLOW_ID}
      # Your job code here
      - run:
          name: Test back end
          command: |
            cd backend
            npm run test
  # Accidentally jumped ahead and missed error :/
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
              - frontend-build-${CIRCLE_WORKFLOW_ID}
      # Your job code here
      - run:
          name: Run audit - frontend
          command: |
            cd frontend
            npm update
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
              - backend-build-${CIRCLE_WORKFLOW_ID}
      # Your job code here
      - run:
          name: Run audit - backend
          # npm install -g npm is to fix audit package error
          command: |
            cd backend
            npm update
            npm audit fix --audit-level=critical --force

  # Infrastructure Phase
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags StackName=udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags StackName=udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            INSTANCE_IP=$(aws ec2 describe-instances \
            --filters 'Name=tag:Name,Values=backend-*' \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)

            echo ${INSTANCE_IP}
            curl -H "Content-Type: text/plain" \
              -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT \
              --data ${INSTANCE_IP} \
              https://api.memstash.io/values/instance_ip

            cd .circleci/ansible/
            aws ec2 describe-instances \
            --filters 'Name=tag:Name,Values=backend-*' \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --region us-west-1 \
            --output text >> inventory.txt
            cat inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["1a:c3:53:27:fc:08:1d:b5:c8:92:e0:ac:be:33:64:80"]
      # attach workspace
      # - attach_workspace:
      #     at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            pip3 install awscli
            aws --version
      - run:
          name: Configure server
          command: |
            # Your code here
            INSTANCE_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/instance_ip)
            echo ${INSTANCE_IP}
            cd .circleci/ansible/
            ls
            echo ${INSTANCE_IP} >> ./inventory.txt
            cat ./inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ./inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            echo ENVIRONMENT=$ENVIRONMENT > .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            cat .env
            rm -rf node_modules/
            npm i
            npm install typescript
            npm run build
            npm run migrations >> migration.log
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            if grep "has been executed successfully" migration.log
            then
              curl -H "Content-Type: text/plain" \
                -H "token: ${CIRCLE_WORKFLOW_ID}" \
                --request PUT \
                --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              npm run migrations:revert
            fi
     # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
            curl -o node-v13.14.0-linux-x64.tar.gz https://nodejs.org/dist/latest-v13.x/node-v13.14.0-linux-x64.tar.gz
            tar --strip-components 1 -xzvf node-v* -C /usr/local
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/udapeople_backend_url)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["1a:c3:53:27:fc:08:1d:b5:c8:92:e0:ac:be:33:64:80"]
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk --no-cache add curl
            apk add --update ansible
            pip3 install awscli
      - run:
          name: Deploy backend
          command: |
            # your code here
            tar czf backend.tar.gz backend/
            cd .circleci/ansible/
            ls
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ./inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk --no-cache add curl
            apk add --update npm
            apk add --no-cache python3 py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install awscli
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(curl -H "token: 776ef8d6-6840-4308-bb5c-1e48824cf347" --request GET https://api.memstash.io/values/udapeople_backend_url)
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            curl -s --head ${API_URL}
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
#
#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure
#
# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
